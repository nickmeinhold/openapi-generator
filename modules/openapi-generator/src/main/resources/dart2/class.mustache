import 'dart:convert';

import 'package:built_collection/built_collection.dart';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

import 'package:{{pubName}}/serializers.dart';

part '{{classFilename}}.g.dart';

abstract class {{classname}} implements Built<{{classname}}, {{classname}}Builder> {

  {{#vars}}
  {{#description}}/* {{{description}}} */{{/description}}
  {{#isNullable}}@nullable{{/isNullable}}
  @BuiltValueField(wireName: '{{baseName}}')
  {{#containerType}}Built{{/containerType}}{{{dataType}}} get {{name}};
  {{#allowableValues}}
  {{#min}} // range from {{min}} to {{max}}{{/min}}//{{^min}}enum {{name}}Enum { {{#values}} {{.}}, {{/values}} };{{/min}}{
  {{/allowableValues}}
  {{/vars}}

  {{classname}}._();

  factory {{classname}}([updates({{classname}}Builder b)]) = _${{classname}};

  Map<String, Object> toJson() {
    return serializers.serializeWith({{classname}}.serializer, this);
  }

  static {{classname}} fromJson(String jsonString) {
    return serializers.deserializeWith({{classname}}.serializer, json.decode(jsonString));
  }

  static Serializer<{{classname}}> get serializer => _${{classVarName}}Serializer;
}